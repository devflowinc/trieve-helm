global:
  additionalLabels:
    # Add additional labels to the deployment
    owner: gen-ai

  additionalAnnotations:
    # Add additional annotations to the deployment
    # key: value
  image:
    registry: trieve
    imagePullPolicy: Always
    # Optional if using your own repository
    # the default is 
    # imagePullSecrets: 
    #   - name: pull-secret-name

postgres:
  # Enables Postgres via the subchart
  enabled: true
  # Installs cloudnative-pg operator
  installCrds: true
  # Override additionalLabels to prevent merge conflict with remote chart
  additionalLabels: {}
  # Pulls from secret if postgres.enabled = true
  # dbURI: "postgres://postgres:password@postgres.default.svc.cluster.local:5432/trieve"
  # This requires installing cloud-native-pg operator https://cloudnative-pg.io/documentation/1.24/installation_upgrade/
  secretKeyRef: # For postgresql connection URI from a secret
    name: trieve-local-trieve-postgres-app # Example, adjust as needed
    key: uri
  clusterSpec:
    # CloudNativePg template spec
    instances: 1
    storage:
      size: 10Gi

keycloak:
  ## WARNING THIS IS NOT PRODUCTION SAFE.
  ## THIS USeS A DEFAULT REALM EXPORT.
  ## YOU MUST MAKE A NEW keycloak realm
  ## TO HARDEN THIS.
  # Install keycloak subchart
  enabled: true
  # Installs the keycloak crd / operator
  installCrds: true

  persistence:
    storageClassName: {}
    size: 10Gi
  #
  ingress:
    host: auth.localtrieve.com
    ingressClassName: nginx
    annotations: {}
      # cert-manager.io/cluster-issuer: "letsencrypt"
      # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    tls: {}
      # - hosts:
      #     - auth.localtrieve.com
      #   secretName: auth-localtrieve-com

# optionalTo enable our pdf2md service, this auto connects to your Trieve instance
#
pdf2md:
  enabled: false
#
#   clickhouse:
#     enabled: false
#
#     connection:
#       clickhouseDB: default
#       clickhouseUser: default
#       clickhousePassword: clickhouse
#       clickhouseUrl: http://clickhouse-trieve-local-trieve:8123
#       
#   redis:
#     enabled: false
#     connection: redis://:password@trieve-local-redis-master:6379
#
#   config:
#     llm: # LLM used BY pdf2md service
#       baseUrl: https://openrouter.ai/api/v1
#       apiKey: ""
#       apiKeyRef:
#         enabled: false
#         secretName: "my-pdf2md-llm-secret"
#         secretKey: "apiKey"
#       model: gpt-*******
#     pdf2md: # API key for the pdf2md service itself, if it requires one to be authenticated by Trieve backend
#       apiKey: "" 
#       apiKeyRef:
#         enabled: false
#         secretName: "my-pdf2md-auth-secret"
#         secretKey: "apiKey"
#
#   s3: # S3 used BY pdf2md service
#     endpoint: https://bucket-s3bucket.s3.amazonaws.com
#     accessKey: ""
#     accessKeyRef:
#       enabled: false
#       secretName: "my-pdf2md-s3-credentials"
#       secretKey: "accessKey"
#     secretKey: ""
#     secretKeyRef:
#       enabled: false
#       secretName: "my-pdf2md-s3-credentials"
#       secretKey: "secretKey"
#     bucket: pdf2md-s3bucket
#     region: us-east-2

clickhouse:
  enabled: true
  installCrds: true

  connection:
    # TODO modify password
    clickhouseDB: default
    clickhouseUser: default
    clickhousePassword: clickhouse
    clickhousePasswordRef:
      enabled: false
      secretName: ""
      secretKey: ""
    clickhouseUrl: http://clickhouse-trieve-local-trieve:8123

  clickhouseSpec:
    ## A ClickhouseInstallation template spec
    configuration:
      users:
        # Use secret reference instead of hardcoded password (requires operator 0.23.0+)
        # For production, set clickhousePasswordRef.enabled to true and remove the hardcoded password
        default/password: clickhouse
        # default/password_sha256_hex:
        #   valueFrom:
        #     secretKeyRef:
        #       name: trieve-clickhouse-password-secret
        #       key: password
        # to allow access outside from kubernetes
        default/networks/ip:
          - 0.0.0.0/0
      clusters:
        - name: cluster1
          templates:
            podTemplate: clickhouse-pod-template
          layout:
            shardsCount: 1
            replicasCount: 1
    templates:
      podTemplates:
        - name: clickhouse-pod-template
          spec:
            containers:
              - name: clickhouse
                image: trieve/clickhouse:latest
                digest: sha256:324f541975c43e96b5df6ede74632102d89172b703960bbf01f1842ccf48d240
                volumeMounts:
                  - name: data-storage-vc
                    mountPath: /var/lib/clickhouse
                  - name: log-storage-vc
                    mountPath: /var/log/clickhouse-server
                env:
                  - name: CLICKHOUSE_ADMIN_PASSWORD
                    value: clickhouse

      volumeClaimTemplates:
        - name: data-storage-vc
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
        - name: log-storage-vc
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 2Gi

minio:
  enabled: false

qdrant:
  enabled: true
  url: http://trieve-local-qdrant:6334
  apiKey: "qdrant-api-key" # This could also be made ref-able if needed
  # trieveSecretOverride:
  #   name: "custom-qdrant-secret"
  #   key: "qdrant-api-key"
  replicaCount: 1
  livenessProbe:
    enabled: false
  metrics:
    serviceMonitor:
      enabled: false
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
  persistence:
    size: "10Gi"
  requests:
    cpu: 1
    memory: 5Gi
  # env:
  #   - name: QDRANT__SERVICE__API_KEY
  #     valueFrom:
  #       secretKeyRef:
  #         name: "custom-qdrant-secret"
  #         key: "qdrant-api-key"

redis:
  enabled: true
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
  auth:
    password: "password" # This is often handled by the redis subchart itself. If this is for app config, make ref-able.
    secretKeyRef:
      enabled: false
      # secretName: "my-redis-secret"
      # secretKey: "password"
  master:
    disableCommands: []
    persistence:
      enabled: false
    pdb:
      create: false
    resources:
      limits:
        memory: 5Gi
  replica:
    replicaCount: 0

containers:
  server:
    tag: sha-2c284cc
    repository: server
    resources: {}
      # requests:
      #   memory: 2Gi
  ingest:
    tag: sha-2c284cc
    repository: ingest
    replicas: 3
    resources: {}
    #   requests:
    #     memory: 2Gi
  update_worker:
    tag: sha-2c284cc
    repository: update-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 100Mi
  batch_etl_worker:
    tag: sha-2c284cc
    repository: etl-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  file_worker:
    tag: sha-2c284cc
    repository: file_worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 200Mi
  delete_worker:
    tag: sha-2c284cc
    repository: delete_worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  group_worker:
    tag: sha-2c284cc
    repository: group_worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  sync_qdrant:
    tag: sha-2c284cc
    repository: sync_qdrant
    resources: {}
    #   requests:
    #     memory: 50Mi
  bktree_worker:
    tag: sha-2c284cc
    repository: bktree-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  word_worker:
    tag: sha-2c284cc
    repository: word-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  word_id_cronjob:
    tag: sha-2c284cc
    repository: word-id-cronjob
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 50Mi
  crawl_worker:
    tag: sha-2c284cc
    repository: crawl-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 1Gi
  csv_jsonl_worker:
    tag: sha-2c284cc
    repository: csv-jsonl-worker
    replicas: 1
    resources: {}
    #   requests:
    #     memory: 1Gi
  search:
    tag: sha-35b84aa
    repository: search
    resources: {}
    #   requests:
    #     memory: 50Mi
  chat:
    tag: sha-35b84aa
    repository: chat
    resources: {}
    #   requests:
    #     memory: 50Mi
  dashboard:
    tag: sha-35b84aa
    repository: dashboard
    resources: {}
    #   requests:
    #     memory: 50Mi
  clickhouse_collapse:
    tag: latest
    repository: clickhouse-collapse-query-script

domains:
  dashboard:
    disabled: false
    host:
    class: nginx
    serviceAnnotations: {}
  server:
    disabled: false
    host:
    class: nginx
    serviceAnnotations: {}
  search:
    disabled: false
    host: 
    class: nginx
    serviceAnnotations: {}
  chat:
    disabled: false
    host: 
    class: nginx
    serviceAnnotations: {}

config:
  vite:
    apiHost: http://api.yourdomain.com/api
    searchUiUrl: http://search.yourdomain.com
    chatUiUrl: http://chat.yourdomain.com
    sentryChatDsn: ""
    dashboardUrl: http://dashboard.yourdomain.com
  redis:
    connections: 3
  qdrant:
    quantizeVectors: false
    replicationFactor: 2
    shardCount: 12
    vectorSizes:
      - 768
      - 1536
      - 1024
      - 3072
  delete_worker:
    batch_size: 10000
  trieve:
    asSecret: false # New: Flag to store the main backend config as a Secret instead of ConfigMap
    strictLookup: false # New: If true, Helm will fail if a secretRef points to a non-existent secret/key
    baseServerUrl:
    disableCrons: true
    batch_limit: 120
    bm25Active: true
    unlimited: true
    cookieSecure: false
    embeddingServerOrigin: http://embedding-jina.default.svc.cluster.local
    sparseServerQueryOrigin: http://embedding-splade-query.default.svc.cluster.local
    sparseServerDocOrigin: http://embedding-splade-doc.default.svc.cluster.local
    embeddingServerOriginBGEM3: http://embedding-m3.default.svc.cluster.local
    embeddingServerOriginJinaCode: http://api.jina.ai/v1
    jinaCodeApiKey: "" # Example: jina_************************************************************
    jinaCodeApiKeyRef:
      enabled: false
      secretName: "my-jina-secret"
      secretKey: "apiKey"
    rerankerServerOrigin: http://embedding-reranker.default.svc.cluster.local
    salt: "tbbqfnygvfirellhzzl" # Should be a unique random string
    secretKey: "lkjadsf2349asdlfkj2334209ualkfsdlfkj1023u19312l3kj12l3kjsaf0d9u90823l1kj3209u34h" # Should be a unique random string
    adminApiKey: "adminApiKey" # Example: "ad91lkjad190adfal"
    adminApiKeyRef:
      enabled: false
      secretName: "my-admin-api-key-secret"
      secretKey: "adminApiKey"
    anthropicAPIKey: ""
    anthropicAPIKeyRef:
      enabled: false
      secretName: "my-anthropic-secret"
      secretKey: "apiKey"
    subtraceToken: ""
    subtraceTokenRef:
      enabled: false
      secretName: "my-subtrace-secret"
      secretKey: "token"
  oidc:
    clientSecret: "" # Example: "YllmLDTy67MbsUBrUAWvQ7z9aMq0QcKx"
    clientSecretRef:
      enabled: false
      secretName: "my-oidc-client-secret"
      secretKey: "clientSecret"
    clientId: "trieve"
    issuerUrl: "http://trieve-keycloak-service:8080/realms/trieve"
    authRedirectUrl: "http://trieve-keycloak-service:8080/realms/trieve/protocol/openid-connect/auth"
  smtp:
    relay: ""
    username: ""
    password: "" # SMTP Password
    passwordRef:
      enabled: false
      secretName: "my-smtp-credentials"
      secretKey: "password"
    emailAddress: ""
  llm: # Main LLM API Key for Trieve backend features
    apiKey: ""
    apiKeyRef:
      enabled: false
      secretName: "my-main-llm-apikey"
      secretKey: "apiKey"
  openai: # Main OpenAI API Key for Trieve backend features
    apiKey: "" # Example: "sk-************************************************************"
    apiKeyRef:
      enabled: false
      secretName: "my-openai-apikey"
      secretKey: "apiKey"
    baseUrl: https://api.openai.com/v1
  s3: # Main S3 credentials for Trieve backend features
    endpoint: ""
    accessKey: ""
    accessKeyRef:
      enabled: false
      secretName: "my-main-s3-credentials"
      secretKey: "accessKey"
    secretKey: ""
    secretKeyRef:
      enabled: false
      secretName: "my-main-s3-credentials"
      secretKey: "secretKey"
    bucket: ""
    region: ""
  stripe:
    secret: ""
    secretRef:
      enabled: false
      secretName: "my-stripe-secret"
      secretKey: "secret"
    webhookSecret: ""
    webhookSecretRef:
      enabled: false
      secretName: "my-stripe-webhook-secret"
      secretKey: "webhookSecret"

embeddings:
  ## For nodeSelector / affinity to use see
  ## https://github.com/huggingface/text-embeddings-inference?tab=readme-ov-file#docker-images
  ## These are the default values that expect `g2-standard-4` nodes to run with
  - name: jina
    revision: main
    model: jinaai/jina-embeddings-v2-base-en
    tag: "89-1.2"
    registry: ghcr.io/huggingface
    repository: text-embeddings-inference
    useGpu: true
    args: []
    # env:
    #   - name: HF_TOKEN
    #     value: "HUGGINGFACE_MODEL_TOKEN"
  - name: splade-doc
    model: naver/efficient-splade-VI-BT-large-doc
    tag: "89-1.4"
    registry: ghcr.io/huggingface
    repository: text-embeddings-inference
    revision: main
    useGpu: true
    args: ["--pooling", "splade"]
  - name: splade-query
    model: naver/efficient-splade-VI-BT-large-query
    tag: "89-1.4"
    registry: ghcr.io/huggingface
    repository: text-embeddings-inference
    revision: main
    useGpu: true
    args: ["--pooling", "splade"]
  - name: m3
    model: BAAI/bge-m3
    tag: "89-1.4"
    registry: ghcr.io/huggingface
    repository: text-embeddings-inference
    revision: main
    useGpu: true
    args: []
  - name: reranker
    model: BAAI/bge-reranker-large
    tag: "89-1.4"
    registry: ghcr.io/huggingface
    repository: text-embeddings-inference
    revision: refs/pr/4
    useGpu: true
    args: []


firecrawl-simple:
  enabled: false

  puppeeter_service_tag: v0.0.13
  firecrawl_tag: v0.0.55
  
  redisUri: "redis://:firecrawl-redis-password@firecrawl-redis-master:6379"
  redisSecret: {}
    # name: firecrawl-redis-secret
    # key: redisUrl
  
  scrapingBeeApiKey: 
  num_workers_per_queue: 8
  proxy:
    enabled: false
    url: 
    server: 
    username: 
    password: 
  
  redis:
    enabled: false
    commonConfiguration: |-
      maxclients 20000
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    auth:
      password: "firecrawl-redis-password"
    master:
      disableCommands: []
      persistence:
        enabled: false
      pdb:
        create: false
      resources:
        requests:
          memory: 10Gi
        limits:
          memory: 10Gi
    replica:
      replicaCount: 0
