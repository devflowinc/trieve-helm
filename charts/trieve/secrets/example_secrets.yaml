# This file provides examples of how to structure your Kubernetes Secrets
# if you choose to use secretKeyRef for sensitive values in your values.yaml.

# Example for OIDC Client Secret
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-oidc-client-secret
#   namespace: <your-namespace> # Replace with the namespace where Trieve is deployed
# type: Opaque
# data:
#   oidcClientSecretKey: "<your-base64-encoded-oidc-client-secret>" # echo -n "yourActualClientSecret" | base64

# Example for SMTP Password
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-smtp-credentials
#   namespace: <your-namespace>
# type: Opaque
# data:
#   smtpPasswordKey: "<your-base64-encoded-smtp-password>"

# Example for Main LLM API Key (config.llm.apiKey)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-main-llm-apikey
#   namespace: <your-namespace>
# type: Opaque
# data:
#   llmApiKey: "<your-base64-encoded-llm-api-key>"

# Example for OpenAI API Key (config.openai.apiKey)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-openai-apikey
#   namespace: <your-namespace>
# type: Opaque
# data:
#   openaiApiKey: "<your-base64-encoded-openai-api-key>"

# Example for S3 Access Key
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-s3-access-key
#   namespace: <your-namespace>
# type: Opaque
# data:
#   s3AccessKey: "<your-base64-encoded-s3-access-key>"

# Example for S3 Secret Key
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-s3-secret-key
#   namespace: <your-namespace>
# type: Opaque
# data:
#   s3SecretKey: "<your-base64-encoded-s3-secret-key>"

# Example for PDF2MD Service API Key (pdf2md.config.pdf2md.apiKey)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-pdf2md-apikey
#   namespace: <your-namespace>
# type: Opaque
# data:
#   pdf2mdApiKey: "<your-base64-encoded-pdf2md-api-key>"

# Example for Trieve Admin API Key (config.trieve.adminApiKey)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-trieve-admin-apikey
#   namespace: <your-namespace>
# type: Opaque
# data:
#   adminApiKey: "<your-base64-encoded-trieve-admin-api-key>"

# --- Instructions ---
# 1. Replace <your-namespace> with the actual namespace.
# 2. Replace <your-base64-encoded-value> with the base64 encoded version of your secret.
#    You can generate this using: echo -n "yourActualSecretValue" | base64
# 3. Uncomment the sections you need and save this file (or a similar one) with your actual secrets.
# 4. Apply this secret manifest to your Kubernetes cluster: kubectl apply -f your_secrets_file.yaml
# 5. Update your Trieve Helm chart's values.yaml to reference these secrets, for example:
#    config:
#      oidc:
#        clientSecretRef:
#          enabled: true
#          secretName: "my-oidc-client-secret"
#          secretKey: "oidcClientSecretKey"
#      llm:
#        apiKeyRef:
#          enabled: true
#          secretName: "my-main-llm-apikey"
#          secretKey: "llmApiKey"
#    # ... and so on for other secrets
